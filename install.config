######## ############## ############
########  GLOBAL VALUE  ############
######## ############## ############

FRAMEWORK_NAME=niceavocate
FRAMEWORK_VERSION=0.0.3

FRAMEWORK(){
    printf "${GREEN}--[ ${FRAMEWORK_NAME} ${FRAMEWORK_VERSION}\n"
}

####################################
######### COLOR VALUE ##############
####################################

BLUE='\033[0;34m'
ORANGE='\033[0;33m'
GREEN='\033[0;32m'
RED='\033[0;31m'
NC='\033[0m' # No Color

####################################
######### SIZE VALUE ###############
####################################

NEED_SIZE=50
FREE_SIZE=`df -h |grep Data |awk '{print $4}' |head -n 1 |grep -o '[0-9]*'`
#FREE_SIZE=0

####################################
######### IP NETWORK ###############
####################################

IP_WIN7=210
IP_WIN10=220
IP_KALI=13
IP_METASPLOITABLE2=230

####################################
######### PORT FORWARD #############
####################################

PORT_WIN7=3389
PORT_WIN10=3389
PORT_KALI=2222
PORT_METASPLOITABLE2=2222

PORT_FORWARD_WIN7=3389
PORT_FORWARD_WIN10=3389
PORT_FORWARD_KALI=22
PORT_FORWARD_METASPLOITABLE2=22

####################################
######### LAB PATH #################
####################################

PATH_LOCAL=$(pwd)
FOLDER_LAB="LAB_INFRASTRUCTURE"
PATH_LAB=${PATH_LOCAL}/${FOLDER_LAB}

WIN7=win7
WIN10=win10
KALI=kali
METASPLOITABLE2=metasploitable2

####################################
######### ID DRIVE #################
####################################

DECODE(){
if [ ! -f ${PATH_LOCAL}/configs/tools/drive_decoded.dat ];
then
    openssl enc -d -aes-256-cbc -in configs/tools/drive.dat -out configs/tools/drive_decoded.dat
    echo -e "\n"
    source ./configs/tools/drive_decoded.dat
else
    source ./configs/tools/drive_decoded.dat
fi
}

####################################
######### NAME BOX WINDOWS #########
####################################

NAME_WIN7BOX=Win7Box.ova
NAME_WIN10BOX=Win10_ITSAFE.ova
NAME_WIN7BOX_ONLY=Win7Box
NAME_WIN10BOX_ONLY=Win10_ITSAFE
NAME_KALI_ONLY=Kali-Linux-2021.4a-vmware-amd64
NAME_METASPLOITABLE2_ONLY=Metasploitable

####################################
######### ULR LINKS ################
####################################

URL_METASPLOITABLE2=https://sourceforge.net/projects/metasploitable/files/Metasploitable2/metasploitable-linux-2.0.0.zip/download\?use_mirror\=freefr\&amp
URL_KALI=https://kali.download/virtual-images/kali-2021.4a/kali-linux-2021.4a-vmware-amd64.7z

####################################
######### VMWARE PATH ##############
####################################

PATH_VMWARE_NAT(){
    cat /Library/Preferences/VMware\ Fusion/vmnet8/nat.conf    
}

PATH_VMWARE_DHCP(){
    cat /Library/Preferences/VMware\ Fusion/vmnet8/dhcpd.conf
}

####################################
######### LOG ######################
####################################

LOG(){
    $1 | > $(date +"%Y-%m-%d_%H-%M-%S").log
}

####################################
######### PROGRESS BAR #############
####################################

PROGRESS_BAR(){
    source ./configs/tools/progress_bar.sh
    setup_scroll_area
    #draw_progress_bar 10
    #sleep 1
    #exec .sh
    #destroy_scroll_area
}

####################################
######### SUDO #####################
####################################

SUDO_PASSWORD(){
    read -s -p "Enter Password for sudo: " sudo_user
    echo -e "\n"
}

####################################
######### REQUIREMENTS #############
####################################

REQUIREMENTS(){
if ! command -v $1 &> /dev/null
then
    printf "${RED}[-] $1 could not be found\n"
    printf "${RED}[!] Install stoped you need install $1\n"
    exit 1
else
    printf "${GREEN}[+] $1 found\n"    
fi
}

CHECK_REQUIREMENTS(){
    REQUIREMENTS wget
    REQUIREMENTS unzip
    REQUIREMENTS 7za
    REQUIREMENTS OVFTOOL
    REQUIREMENTS vmrun
    REQUIREMENTS openssl
}

####################################
######### SIZE #####################
####################################

if (( $FREE_SIZE >= $NEED_SIZE ))
then
    LAB="Y"
else
    LAB="N"
fi

####################################
####### LAB CHECK DIRECTORY ########
####################################

LAB_EXIST(){
    [ -d "${PATH_LAB}" ] && printf "${GREEN}[+] Directory exists\n" || mkdir "${PATH_LOCAL}/${FOLDER_LAB}"
}

####################################
######### REGEX MACOS ##############
####################################

REGEX_MACOS_GET_IP_DHCP_VMWARE(){
    grep -o '^[subnet]\{6\}[ ]\{1\}[0-9]\{1,3\}[.][0-9]\{1,3\}[.][0-9]\{1,3\}[.][0-9]\{1,3\}' |sed 's/subnet //g'  
}

REGEX_MACOS_GET_MAC_VMX(){
    grep -o '[0-9A-Fa-f]\{2\}[:]\{1\}[0-9A-Fa-f]\{2\}[:]\{1\}[0-9A-Fa-f]\{2\}[:]\{1\}[0-9A-Fa-f]\{2\}[:]\{1\}[0-9A-Fa-f]\{2\}[:]\{1\}[0-9A-Fa-f]\{2\}'  |tr '[:lower:]' '[:upper:]' |head -n 1
}

####################################
######### DOWNLOAD #################
####################################

DL_DRIVE(){
    URL="https://docs.google.com/uc?export=download&id=$1"
    wget --load-cookies /tmp/cookies.txt "https://docs.google.com/uc?export=download&confirm=$(wget --quiet --save-cookies /tmp/cookies.txt --keep-session-cookies --no-check-certificate $URL -O- | sed -rn 's/.*confirm=([0-9A-Za-z_]+).*/\1\n/p')&id=$1" -O $2 && rm -rf /tmp/cookies.txt
}

DL_METASPLOITABLE2(){
    mkdir "${PATH_LOCAL}/${FOLDER_LAB}/${METASPLOITABLE2}"
    wget ${URL_METASPLOITABLE2} -O ${METASPLOITABLE2}.zip
    mv ${METASPLOITABLE2}.zip "${PATH_LOCAL}/${FOLDER_LAB}/${METASPLOITABLE2}"
    unzip "${PATH_LOCAL}/${FOLDER_LAB}/${METASPLOITABLE2}/${METASPLOITABLE2}.zip" -d "${PATH_LOCAL}/${FOLDER_LAB}/${METASPLOITABLE2}/"
    mv ${PATH_LOCAL}/${FOLDER_LAB}/${METASPLOITABLE2}/Metasploitable2-Linux/* ${PATH_LOCAL}/${FOLDER_LAB}/${METASPLOITABLE2}/
    rm -rf "${PATH_LOCAL}/${FOLDER_LAB}/${METASPLOITABLE2}/Metasploitable2-Linux/"
    rm "${PATH_LOCAL}/${FOLDER_LAB}/${METASPLOITABLE2}/${METASPLOITABLE2}.zip"
}

DL_KALI(){
    mkdir "${PATH_LOCAL}/${FOLDER_LAB}/${KALI}"
    wget ${URL_KALI} -O ${KALI}.7z
    mv ${KALI}.7z "${PATH_LOCAL}/${FOLDER_LAB}/${KALI}"
    7za e "${PATH_LOCAL}/${FOLDER_LAB}/${KALI}/${KALI}.7z" -o"${PATH_LOCAL}/${FOLDER_LAB}/${KALI}/"
    rm "${PATH_LOCAL}/${FOLDER_LAB}/${KALI}/${KALI}.7z"
}

DL_WIN7(){
    mkdir "${PATH_LOCAL}/${FOLDER_LAB}/${WIN7}"
    DL_DRIVE ${ID_WIN7} ${NAME_WIN7BOX}
    mv ${NAME_WIN7BOX} "${PATH_LOCAL}/${FOLDER_LAB}/${WIN7}"
}

DL_WIN10(){
    mkdir "${PATH_LOCAL}/${FOLDER_LAB}/${WIN10}"
    DL_DRIVE ${ID_WIN10} ${NAME_WIN10BOX}
    mv ${NAME_WIN10BOX} "${PATH_LOCAL}/${FOLDER_LAB}/${WIN10}"
}

####################################
######### CONVERT ##################
####################################

OVFTOOL(){
    /Applications/VMware\ Fusion.app/Contents/Library/VMware\ OVF\ Tool/ovftool $1 $2 $3
}

SHA256(){
    SHA256OVF=$(sha256sum ${PATH_LAB}/$2/$1.ovf|grep -o '[a-z0-9]\{64\}')
    SHA256VMDK=$(sha256sum ${PATH_LAB}/$2/$1-disk1.vmdk|grep -o '[a-z0-9]\{64\}')
   
cat <<EOF >> ${PATH_LAB}/$2/$1.mf
SHA256($1.ovf)= $SHA256OVF
SHA256($1-disk1.vmdk)= $SHA256VMDK
EOF
}

CONVERT_WIN7(){
    OVFTOOL --lax ${PATH_LAB}/${WIN7}/Win7Box.ova ${PATH_LAB}/${WIN7}/Win7Box.ovf

    cp ${PATH_LOCAL}/configs/Win7Box.ovf ${PATH_LAB}/${WIN7}/Win7Box.ovf
    rm ${PATH_LAB}/${WIN7}/Win7Box.mf
    SHA256 ${NAME_WIN7BOX_ONLY} ${WIN7}
}

CONVERT_WIN10(){
    OVFTOOL --lax ${PATH_LAB}/${WIN10}/Win10_ITSAFE.ova ${PATH_LAB}/${WIN10}/Win10_ITSAFE.ovf 
    
    cp ${PATH_LOCAL}/configs/Win10_ITSAFE.ovf ${PATH_LAB}/${WIN10}/Win10_ITSAFE.ovf
    rm ${PATH_LAB}/${WIN10}/Win10_ITSAFE.mf
    SHA256 ${NAME_WIN10BOX_ONLY} ${WIN10}
}

####################################
######### IMPORT ###################
####################################

IMPORT_WIN7(){
    OVFTOOL -o ${PATH_LAB}/${WIN7}/Win7Box.ovf ${PATH_LAB}/${WIN7}/
}

IMPORT_WIN10(){
    OVFTOOL -o ${PATH_LAB}/${WIN10}/Win10_ITSAFE.ovf ${PATH_LAB}/${WIN10}/
}

####################################
######### DISABLE MSG BOX VMWARE ###
####################################

DISABLE_MSGBOX_WIN10(){
    if
    cat ${PATH_LAB}/${WIN10}/Win10_ITSAFE.vmwarevm/Win10_ITSAFE.vmx \
        | grep 'msg.autoAnswer = TRUE' >/dev/null;
    then echo "[+] Disable is enable for WIN10";
    else
    echo 'msg.autoAnswer = TRUE' >> ${PATH_LAB}/${WIN10}/Win10_ITSAFE.vmwarevm/Win10_ITSAFE.vmx 
    fi
}

DISABLE_MSGBOX_WIN7(){
    if 
    cat ${PATH_LAB}/${WIN7}/Win7Box.vmwarevm/Win7Box.vmx \
        | grep 'msg.autoAnswer = TRUE'  >/dev/null;
    then echo "[+] Disable is enable for WIN7";
    else 
    echo 'msg.autoAnswer = TRUE' >> ${PATH_LAB}/${WIN7}/Win7Box.vmwarevm/Win7Box.vmx 
    fi
}

DISABLE_MSGBOX_KALI(){
    if 
    cat ${PATH_LAB}/${KALI}/*.vmx \
         | grep 'msg.autoAnswer = TRUE'  >/dev/null;
    then echo "[+] Disable is enable for KALI";
    else
     echo 'msg.autoAnswer = TRUE' >> ${PATH_LAB}/${KALI}/*.vmx
    fi
}

DISABLE_MSGBOX_METASPLOITABLE2(){
    if
    cat ${PATH_LAB}/${METASPLOITABLE2}/*.vmx \
        | grep 'msg.autoAnswer = TRUE'  >/dev/null;
    then echo "[+] Disable is enable for METASPLOITABLE2";
    else
     echo 'msg.autoAnswer = TRUE' >> ${PATH_LAB}/${METASPLOITABLE2}/*.vmx
    fi 
}

####################################
######### REGISTER #################
####################################

REGISTER_WIN7(){
    vmrun -T ws start ${PATH_LAB}/${WIN7}/Win7Box.vmwarevm/Win7Box.vmx 
}

REGISTER_WIN10(){
    vmrun -T ws start ${PATH_LAB}/${WIN10}/Win10_ITSAFE.vmwarevm/Win10_ITSAFE.vmx 
}

REGISTER_KALI(){
    vmrun -T ws start ${PATH_LAB}/${KALI}/*.vmx
}

REGISTER_METASPLOITABLE2(){
    vmrun -T ws start ${PATH_LAB}/${METASPLOITABLE2}/*.vmx
}

####################################
######### START ####################
####################################

START_WIN7(){
    vmrun -T ws start ${PATH_LAB}/${WIN7}/Win7Box.vmwarevm/Win7Box.vmx 
}

START_WIN10(){
    vmrun -T ws start ${PATH_LAB}/${WIN10}/Win10_ITSAFE.vmwarevm/Win10_ITSAFE.vmx 
}

START_KALI(){
    vmrun -T ws start ${PATH_LAB}/${KALI}/*.vmx
}

START_METASPLOITABLE2(){
    vmrun -T ws start ${PATH_LAB}/${METASPLOITABLE2}/*.vmx
}

####################################
######### STOP #####################
####################################

STOP_WIN7(){
    vmrun stop ${PATH_LAB}/${WIN7}/Win7Box.vmwarevm/Win7Box.vmx nogui
}

STOP_WIN10(){
    vmrun stop ${PATH_LAB}/${WIN10}/Win10_ITSAFE.vmwarevm/Win10_ITSAFE.vmx nogui
}

STOP_KALI(){
    vmrun stop ${PATH_LAB}/${KALI}/*.vmx nogui
}

STOP_METASPLOITABLE2(){
    vmrun stop ${PATH_LAB}/${METASPLOITABLE2}/*.vmx nogui
}

####################################
######### SHUTDOWN VMWARE ##########
####################################

SHUTDOWN_VMARE(){
    kill -9 $(ps -A | awk '{print $1, $2, $3, $4, $5, $6}' | grep -E 'VMware|Fusion'|awk '{print $1}') 2>&1>/dev/null
}

####################################
######### NETWORK DHCP #############
####################################

GET_IP_DHCP_VMWARE(){
    PATH_VMWARE_DHCP | REGEX_MACOS_GET_IP_DHCP_VMWARE
}

GET_IP_RANGE_DHCP_VMWARE(){
    GET_IP_DHCP_VMWARE | sed 's/[0-9]{3}[.]{1}//g'
}

####################################
######### NETWORK MAC ##############
####################################

GET_MAC_VMX(){
    cat $1   | REGEX_MACOS_GET_MAC_VMX
}

GET_MAC_VMX_WIN10(){
    GET_MAC_VMX ${PATH_LAB}/${WIN10}/*/*.vmx
}

GET_MAC_VMX_WIN7(){
    GET_MAC_VMX ${PATH_LAB}/${WIN7}/*/*.vmx 
}

GET_MAC_VMX_KALI(){
    GET_MAC_VMX ${PATH_LAB}/${KALI}/*.vmx 
}

GET_MAC_VMX_METASPLOITABLE2(){
    GET_MAC_VMX ${PATH_LAB}/${METASPLOITABLE2}/*.vmx 
}

####################################
######### NETWORK VMX ##############
####################################

GET_NAME_VMX(){
    ls  ${PATH_LAB}/$1/*.vmx  | awk -F'/' '{print $NF}'
}

GET_NAME_VMX_WIN7(){
    GET_NAME_VMX ${WIN7}/* 
}

GET_NAME_VMX_WIN10(){
    GET_NAME_VMX ${WIN10}/* 
}

GET_NAME_VMX_KALI(){
    GET_NAME_VMX ${KALI} 
}

GET_NAME_VMX_METASPLOITABLE2(){
    GET_NAME_VMX ${METASPLOITABLE2} 
}

GENERATE_NETWORK(){
cat <<EOF
host $1 {
        hardware ethernet $2;
        fixed-address $3;
}
EOF
}

####################################
######### NETWORK IP ###############
####################################

GET_IP_END_WIN7(){
    GET_IP_DHCP_VMWARE    | awk -F '.' '{print $1,$2,$3,'$IP_WIN7'}'  |sed 's/ /./g' 
}

GET_IP_END_WIN10(){
    GET_IP_DHCP_VMWARE    | awk -F '.' '{print $1,$2,$3,'$IP_WIN10'}' |sed 's/ /./g' 
}

GET_IP_END_KALI(){
    GET_IP_DHCP_VMWARE    | awk -F '.' '{print $1,$2,$3,'$IP_KALI'}'  |sed 's/ /./g' 
}

GET_IP_END_METASPLOITABLE2(){
    GET_IP_DHCP_VMWARE    | awk -F '.' '{print $1,$2,$3,'$IP_METASPLOITABLE2'}'  |sed 's/ /./g' 
}

GENERATE_NETWORK_WIN7(){
    GENERATE_NETWORK $(GET_NAME_VMX_WIN7 2>&1 ) $(GET_MAC_VMX_WIN7 2>&1) $(GET_IP_END_WIN7 2>&1)
}

GENERATE_NETWORK_WIN10(){
    GENERATE_NETWORK $(GET_NAME_VMX_WIN10 2>&1 ) $(GET_MAC_VMX_WIN10 2>&1) $(GET_IP_END_WIN10 2>&1) 
}

GENERATE_NETWORK_KALI(){
    GENERATE_NETWORK $(GET_NAME_VMX_KALI 2>&1 ) $(GET_MAC_VMX_KALI 2>&1) $(GET_IP_END_KALI 2>&1) 
}

GENERATE_NETWORK_METASPLOITABLE2(){
    GENERATE_NETWORK $(GET_NAME_VMX_METASPLOITABLE2 2>&1 ) $(GET_MAC_VMX_METASPLOITABLE2 2>&1) $(GET_IP_END_METASPLOITABLE2 2>&1) 
}

UPDATE_NETWORK(){    
    mkdir ${PATH_LOCAL}/configs/dhcpd_default/
    cat /Library/Preferences/VMware\ Fusion/vmnet8/dhcpd.conf > ${PATH_LOCAL}/configs/dhcpd_default/dhcpd.conf
    mkdir ${PATH_LOCAL}/configs/dhcpd_updated/
    cat /Library/Preferences/VMware\ Fusion/vmnet8/dhcpd.conf > ${PATH_LOCAL}/configs/dhcpd_updated/dhcpd.conf
    (GENERATE_NETWORK_WIN7  2>&1)>> ${PATH_LOCAL}/configs/dhcpd_updated/dhcpd.conf 
    (GENERATE_NETWORK_WIN10 2>&1)>> ${PATH_LOCAL}/configs/dhcpd_updated/dhcpd.conf 
    (GENERATE_NETWORK_KALI  2>&1)>> ${PATH_LOCAL}/configs/dhcpd_updated/dhcpd.conf 
    (GENERATE_NETWORK_METASPLOITABLE2 2>&1)>> ${PATH_LOCAL}/configs/dhcpd_updated/dhcpd.conf 
    echo "$(echo $sudo_user 2>&1)"| sudo -S cp ${PATH_LOCAL}/configs/dhcpd_updated/dhcpd.conf /Library/Preferences/VMware\ Fusion/vmnet8/
}

####################################
##### NETWORK PORTFORWARDING #######
####################################

GENERATE_FORWARDING(){
portfw=$3
ip=$2
port=$1
host=$4
}

PORT_FORWARDING(){
   NAT_CONF=""

   mkdir ${PATH_LOCAL}/configs/net_default/
   cat /Library/Preferences/VMware\ Fusion/vmnet8/nat.conf > ${PATH_LOCAL}/configs/net_default/nat.conf
   mkdir ${PATH_LOCAL}/configs/net_updated/
   cat /Library/Preferences/VMware\ Fusion/vmnet8/nat.conf > ${PATH_LOCAL}/configs/net_updated/nat.conf
   NAT_CONF=$(cat /Library/Preferences/VMware\ Fusion/vmnet8/nat.conf )
   NAT_CONF=$(echo -n "$NAT_CONF")
   
  GENERATE_FORWARDING $PORT_FORWARD_WIN7 $(GET_IP_DHCP_VMWARE    | awk -F '.' '{print $1,$2,$3,'$IP_WIN7'}'  |sed 's/ /./g' ) $PORT_WIN7 $(echo $WIN7| tr  "[:lower:]" "[:upper:]")
  NAT_CONF=$(echo -n "$NAT_CONF" | awk '1;/incomingtcp/{print "\n# '$host'\n\n'$portfw' = '$ip':'$port'"}' )
  echo -n "$NAT_CONF"

  GENERATE_FORWARDING $PORT_FORWARD_WIN10 $(GET_IP_DHCP_VMWARE    | awk -F '.' '{print $1,$2,$3,'$IP_WIN10'}'  |sed 's/ /./g' ) $PORT_WIN10 $(echo $WIN10| tr  "[:lower:]" "[:upper:]")
  NAT_CONF=$(echo -n "$NAT_CONF" | awk '1;/incomingtcp/{print "\n# '$host'\n\n'$portfw' = '$ip':'$port'"}' )
  echo -n "$NAT_CONF"
 
  GENERATE_FORWARDING $PORT_FORWARD_KALI $(GET_IP_DHCP_VMWARE    | awk -F '.' '{print $1,$2,$3,'$IP_KALI'}'  |sed 's/ /./g' ) $PORT_KALI $(echo $KALI| tr  "[:lower:]" "[:upper:]")
  NAT_CONF=$(echo -n "$NAT_CONF" | awk '1;/incomingtcp/{print "\n# '$host'\n\n'$portfw' = '$ip':'$port'"}' )
  echo -n "$NAT_CONF"

  GENERATE_FORWARDING $PORT_FORWARD_METASPLOITABLE2 $(GET_IP_DHCP_VMWARE    | awk -F '.' '{print $1,$2,$3,'$IP_METASPLOITABLE2'}'  |sed 's/ /./g' ) $PORT_METASPLOITABLE2 $(echo $METASPLOITABLE2| tr  "[:lower:]" "[:upper:]")
  NAT_CONF=$(echo -n "$NAT_CONF" | awk '1;/incomingtcp/{print "\n# '$host'\n\n'$portfw' = '$ip':'$port'"}' )
  echo -n "$NAT_CONF"
 
  echo -n "$NAT_CONF" > ${PATH_LOCAL}/configs/net_updated/nat.conf
  echo "$(echo $sudo_user 2>&1)" | sudo -S cp ${PATH_LOCAL}/configs/net_updated/nat.conf /Library/Preferences/VMware\ Fusion/vmnet8/
}

####################################
######### ON OFF ###################
####################################

ON_OFF(){
   echo "[+] Do yo whant start or stop virtual machine ?"
   echo "start (y stop (n "
   read START_STOP
   if [[ "$START_STOP" == "Y" || "$START_STOP" == "y" || "$START_STOP" == "yes" ]] ; then echo START;$1;sleep 3; else echo STOP;$2;SHUTDOWN_VMARE >/dev/null;sleep 3; fi;:
}

ON_OFF_ALL(){
   echo "[+] Do yo whant start or stop virtual machine ?"
   echo "start (y stop (n "
   read START_STOP
   if [[ "$START_STOP" == "Y" || "$START_STOP" == "y" || "$START_STOP" == "yes" ]] ; then echo START;$1;$2;$3;$4;sleep 3; else echo STOP;$5;$6;$7;$8;SHUTDOWN_VMARE >/dev/null;sleep 3; fi;:
}

####################################
######### DL #######################
####################################

DL(){
    PROGRESS_BAR
    draw_progress_bar 0
    sleep 1
#    DL_WIN7
    draw_progress_bar 25
    sleep 6
    DL_KALI
    draw_progress_bar 75
    sleep 6
    DL_METASPLOITABLE2
    draw_progress_bar 100
    sleep 1
#    DL_WIN10
    draw_progress_bar 50
    sleep 6
    destroy_scroll_area
}

####################################
######### CONVERT ##################
####################################

CONVERT(){
    CONVERT_WIN7
    CONVERT_WIN10  
}

####################################
######### IMPORT ###################
####################################

IMPORT(){
    IMPORT_WIN7
    IMPORT_WIN10
}

####################################
######### CONFIGURE ################
####################################

CONFIGURE(){ 
    DISABLE_MSGBOX_WIN7   
    DISABLE_MSGBOX_WIN10   
    DISABLE_MSGBOX_KALI 
    DISABLE_MSGBOX_METASPLOITABLE2

    START_WIN7  >/dev/null &
    START_WIN10 >/dev/null &
    START_KALI  >/dev/null &
    START_METASPLOITABLE2 >/dev/null &
    
    UPDATE_NETWORK
    sleep 3
    PORT_FORWARDING
    sleep 30
    SHUTDOWN_VMARE >/dev/null
    clear
}

####################################
######### INSTALL ##################
####################################

INSTALL(){
    DL
    CONVERT
    IMPORT
    CONFIGURE
}

####################################
######### REMOVE WINDOWS ###########
####################################

REMOVE_WINDOWS(){
    echo "[+] Remove windows "    
    echo "1) Remove without .ova 2) Delete all files in folder windows"
    echo; echo "[?] Give me your choice"
    echo "[!] Example : 1"
    read Keypress

case "$Keypress" in
 "1")
    clear
    FRAMEWORK
    echo "[+] Remove all file without .ova"
    printf "${GREEN} [+] Remove windows 7 \n"
    rm -- "${FOLDER_LAB}/win7/Win7Box-disk1.vmdk"
    rm -- "${FOLDER_LAB}/win7/Win7Box.mf"
    rm -- "${FOLDER_LAB}/win7/Win7Box.ovf"
    rm -rf -- "${FOLDER_LAB}/win7/Win7Box.vmwarevm/" 
    
    printf "${GREEN} [+] Remove windows 10 \n"
    rm --  "${FOLDER_LAB}/win10/Win10_ITSAFE.mf"
    rm --  "${FOLDER_LAB}/win10/Win10_ITSAFE.ovf"

;;
 "2") 
    clear
    FRAMEWORK
    echo "[+] Remove all file with .ova"

    printf "${GREEN} [+] Remove windows 7 machine \n"
    rm -- "${FOLDER_LAB}/win7/Win7Box-disk1.vmdk"
    rm -- "${FOLDER_LAB}/win7/Win7Box.mf"
    rm -- "${FOLDER_LAB}/win7/Win7Box.ovf"
    rm -rf -- "${FOLDER_LAB}/win7/Win7Box.vmwarevm/"
    rm -- "${FOLDER_LAB}/win7/Win7Box.ova"
    
    printf "${GREEN} [+] Remove windows 10 \n"
    rm -- "${FOLDER_LAB}/win10/Win10_ITSAFE.mf"
    rm -- "${FOLDER_LAB}/win10/Win10_ITSAFE.ovf"
    rm -- "${FOLDER_LAB}/win10/Win10_ITSAFE.ova"
;;
  *             ) echo "Exit";exit 0;
esac   
}

####################################
######### REMOVE NETWORK ###########
####################################

REMOVE_NETWORK(){
    clear
    FRAMEWORK
    echo "[+] Restaure network file "    
    echo "1) Restaure network file 2) Do not restore network file"
    echo; echo "[?] Give me your choice"
    echo "[!] Example : 1"
    read Keypress

case "$Keypress" in
 "1") 
    clear
    FRAMEWORK
    printf "${GREEN}[+] Restoring original network files"
    echo -e "\n"
    echo "$(echo $sudo_user 2>&1)" |sudo -S cp ${PATH_LOCAL}/configs/net_default/nat.conf /Library/Preferences/VMware\ Fusion/vmnet8/nat.conf
    echo "$(echo $sudo_user 2>&1)" |sudo -S cp ${PATH_LOCAL}/configs/dhcpd_default/dhcpd.conf /Library/Preferences/VMware\ Fusion/vmnet8/dhcpd.conf
    sleep 3
    clear
;;
 "2") 
    clear
;;
  *             ) echo "Exit";exit 0;
esac   
}

####################################
######### REMOVE LINUX #############
####################################

REMOVE_LINUX(){
    clear
    FRAMEWORK
    echo "[+] Remove Linux machines "    
    echo "  1)  Remove Linux machines 2) Do not remove Linux machines"
    echo; echo "[?] Give me your choice"
    echo "[!] Example : 1"
    read Keypress

case "$Keypress" in
 "1") 
    clear
    FRAMEWORK
    printf "${GREEN} [+] Remove Kali and Metasploitable 2 \n"
    rm -rf -- "${FOLDER_LAB}/${KALI}"
    rm -rf -- "${FOLDER_LAB}/${METASPLOITABLE2}"
    sleep 3
    clear
;;
 "2") 
    clear
;;
  *             ) echo "Exit";exit 0;
esac   
}

####################################
######### REMOVE ALL ###############
####################################

REMOVE_ALL(){
    clear
    FRAMEWORK
    echo "[+] Remove all machines "    
    echo "  1)  Remove all machines 2) Remove step by step"
    echo; echo "[?] Give me your choice"
    echo "[!] Example : 1"
    read Keypress

case "$Keypress" in
 "1") 
    clear
    FRAMEWORK
    printf "${GREEN}[+] Retaure network\n"
    echo "$(echo $sudo_user 2>&1)" |sudo -S cp ${PATH_LOCAL}/configs/net_default/nat.conf /Library/Preferences/VMware\ Fusion/vmnet8/nat.conf
    echo "$(echo $sudo_user 2>&1)" |sudo -S cp ${PATH_LOCAL}/configs/dhcpd_default/dhcpd.conf /Library/Preferences/VMware\ Fusion/vmnet8/dhcpd.conf
    rm -rf -- "${PATH_LOCAL}/configs/net_default/"
    rm -rf -- "${PATH_LOCAL}/configs/dhcpd_default/"
    rm -rf -- "${PATH_LOCAL}/configs/dhcpd_updated/"
    rm -rf -- "${PATH_LOCAL}/configs/net_updated/"
    rm -- "${PATH_LOCAL}/configs/tools/drive_decoded.dat"

    printf "${GREEN}[+] Remove windows 7 machine\n"
    rm -- "${FOLDER_LAB}/win7/Win7Box-disk1.vmdk"
    rm -- "${FOLDER_LAB}/win7/Win7Box.mf"
    rm -- "${FOLDER_LAB}/win7/Win7Box.ovf"
    rm -rf -- "${FOLDER_LAB}/win7/Win7Box.vmwarevm/"
    rm -- "${FOLDER_LAB}/win7/Win7Box.ova"

    printf "${GREEN}[+] Remove windows 10 machine\n"
    rm -- "${FOLDER_LAB}/win10/Win10_ITSAFE-disk1.vmdk"
    rm -- "${PATH_LAB}/win10/Win10_ITSAFE.mf"
    rm -- "${PATH_LAB}/win10/Win10_ITSAFE.ovf"
    rm -- "${PATH_LAB}/win10/Win10_ITSAFE.ova"
    rm -rf -- "${FOLDER_LAB}/win10/Win10_ITSAFE.vmwarevm/"

    printf "${GREEN}[+] Remove kali machines\n"
    rm -rf -- "${PATH_LAB}/${KALI}/"
    printf "${GREEN}[+] Remove metasploitable 2 machines\n"
    rm -rf -- "${PATH_LAB}/${METASPLOITABLE2}/"
#   printf "${GREEN}[+] Remove Lab folder\n"
#   rm -rf -- "LAB_INFRASTRUCTURE/" <<- yes,i know i can use this command for remove all files... 
#   printf "${GREEN} [+] The lab is removed\n"
    sleep 3   
;;
 "2") 
    clear
    FRAMEWORK
    REMOVE_NETWORK
    REMOVE_WINDOWS
    REMOVE_LINUX
;;
  *             ) echo "Exit";exit 0;
esac   
}

####################################
######### MENU INSTALL #############
####################################

MENU_INSTALL(){
    
while :; do   
    clear
    FRAMEWORK
    printf "${GREEN}[+] The Installation is operational\n"
    echo;
    echo "[1] Install full lab"
    echo "[2] Do you wan start the machine after the lab is install ?"
    echo "[3] Remove all lab and restore original configuration"

    echo; echo "[?] Give me your choice"
    echo "[!] Example : 1"

    read Keypress

case "$Keypress" in
    "1" ) 
    clear
    INSTALL LOG;;

    "2" ) 
    clear
    MENU;;

    "3" ) 
    clear
    REMOVE_LAB LOG;;

    *             ) echo "Exit";exit 0;
esac   
shift
done
}

####################################
######### MENU #####################
####################################

MENU(){
    
while :; do   
    clear   
    printf "${GREEN}--[ ${FRAMEWORK_NAME} ${FRAMEWORK_VERSION}\n"
    echo "1) Windows 7 2) Windows 10 3) Kali Linux 4) Metasploitable 2"
    echo "5) Start or stop all machine of the lab"


    echo; echo "[?] Give me your choice"
    echo "[!] Example : 1"
    read Keypress

case "$Keypress" in
    "1") 
    clear
    ON_OFF START_WIN7 STOP_WIN7;;

    "2") 
    clear
    ON_OFF START_WIN10 STOP_WIN10;;

    "3") 
    clear
    ON_OFF START_KALI STOP_KALI;;

    "4") 
    clear
    ON_OFF START_METASPLOITABLE2 STOP_METASPLOITABLE2;;
 
    "5") 
    clear
    ON_OFF_ALL START_WIN7 START_WIN10 START_KALI START_METASPLOITABLE2 STOP_WIN7 STOP_WIN10 STOP_KALI STOP_METASPLOITABLE2;;
    *             ) echo "Exit";exit 0;
esac   
shift
done
}

####################################
######### REMOVE LAB ###############
####################################

REMOVE_LAB(){   
    REMOVE_ALL    
    exit 0
}